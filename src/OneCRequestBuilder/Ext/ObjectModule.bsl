Перем ДеревоАСТ Экспорт;
Перем ТекущийУзел;
Перем ПозицияСледующаяСтрока;

Функция Тест(ТекстКоманд, вхДерево) Экспорт
	
	ПервоначальнаяНастройка();
	
	Выполнить(ТекстКоманд);
	
	вхДерево.Строки.Очистить();
	
	Для каждого КолонкаДерева Из ДеревоАСТ.Колонки Цикл
		Если вхДерево.Колонки.Найти(КолонкаДерева.Имя) = Неопределено Тогда
			вхДерево.Колонки.Добавить(КолонкаДерева.Имя, КолонкаДерева.ТипЗначения);
		КонецЕсли;	
	КонецЦикла; 
	
	СкопироватьСтрокиДерева(ДеревоАСТ.Строки, вхДерево.Строки);
		
	Возврат ТекстЗапроса();
	
КонецФункции // Тест()

Процедура СкопироватьСтрокиДерева(Источник, Приемник)
	
	Для каждого СтрокаДерева Из Источник Цикл
		
		НС = Приемник.Добавить();
		
		ЗаполнитьЗначенияСвойств(НС, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДерева(СтрокаДерева.Строки, НС.Строки);
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // СкопироватьСтрокиДерева()

Функция ТекстЗапроса() Экспорт

	МассивСтрок = ОбработатьСтрокиДерева(ДеревоАСТ.Строки);

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

Функция ОбработатьСтрокиДерева(СтрокиДерева, Знач Отступ = 0, Знач РасположениеСтрокВКонтейнере = "")
	
	ЭтоНоваяСтрока = РасположениеСтрокВКонтейнере = ПозицияСледующаяСтрока;
	
	Отступы = "										";
	
	МассивСтрок = Новый Массив;
		
	Для Каждого Строка Из СтрокиДерева Цикл
							
		Подстроки = ОбработатьСтрокиДерева(Строка.Строки, Отступ + Строка.Отступ, Строка.Позиция);
				
		Если Подстроки.Количество() > 0 Тогда
			
			РазделительКонтейнера  = Строка.Разделитель;
			РазделительТекстаКонтейнера = ?(ЗначениеЗаполнено(Строка.Текст), " ", "");
			
			Текст = СтрШаблон("%1%2%3%4%5", 
				Строка.Текст, 
				РазделительТекстаКонтейнера,
				?(ЗначениеЗаполнено(Строка.ЛевыйСимволГруппы),Строка.ЛевыйСимволГруппы,""),
				СтрСоединить(Подстроки, РазделительКонтейнера),
				?(ЗначениеЗаполнено(Строка.ПравыйСимволГруппы),Строка.ПравыйСимволГруппы,"")
				);
						
		Иначе
			Текст = Строка.Текст;
		КонецЕсли;
		
		Если ЭтоНоваяСтрока И НЕ Строка.Виртуальная И Отступ > 0 Тогда
			Текст = СтрШаблон("%1%2", Лев(Отступы, Отступ), Текст);
		КонецЕсли; 
		
		Если ЭтоНоваяСтрока И НЕ Строка.Виртуальная Тогда
			Текст = СтрШаблон("%1%2", Символы.ПС, Текст);
		КонецЕсли;
				
	    МассивСтрок.Добавить(Текст);
			
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

Процедура ПервоначальнаяНастройка()

	ДеревоАСТ = Новый ДеревоЗначений;
	ДеревоАСТ.Колонки.Добавить("Токен", Новый ОписаниеТипов("Строка"));
	ДеревоАСТ.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	ДеревоАСТ.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	ДеревоАСТ.Колонки.Добавить("Позиция", Новый ОписаниеТипов("Строка"));
	ДеревоАСТ.Колонки.Добавить("Отступ", Новый ОписаниеТипов("Число"));
	ДеревоАСТ.Колонки.Добавить("Разделитель", Новый ОписаниеТипов("Строка"));
	ДеревоАСТ.Колонки.Добавить("Виртуальная", Новый ОписаниеТипов("Булево"));
	ДеревоАСТ.Колонки.Добавить("ЛевыйСимволГруппы", Новый ОписаниеТипов("Строка"));
	ДеревоАСТ.Колонки.Добавить("ПравыйСимволГруппы", Новый ОписаниеТипов("Строка"));
	
	ТекущийУзел = ДеревоАСТ;
	
	ПозицияСледующаяСтрока = "СледующаяСтрока";

КонецПроцедуры

Функция УзелНужногоТипа(Узел, Знач Токены)
	
	РезультатФункции = Ложь;
	
	Если ЗначениеЗаполнено(Токены) Тогда
		МассивТокенов = СтрРазделить(Токены, ",");
		РезультатФункции = ТипЗнч(Узел) = Тип("СтрокаДереваЗначений") 
			И МассивТокенов.Найти(Узел.Токен) <> Неопределено;
	КонецЕсли; 
	
	Возврат РезультатФункции;
		
КонецФункции // РодительНужногоТипа()

Функция ТипУзлаДерево(Узел)
	Если Узел = Неопределено Тогда
		Узел = ДеревоАСТ;
	КонецЕсли; 
	Возврат ТипЗнч(Узел) = Тип("ДеревоЗначений");	
КонецФункции // ТекущийУзелДерево()

Функция ПолучитьНужныйУзел(Знач вхТокены = "")
	
	РезультатФункции = ТекущийУзел;
	
	Токены = вхТокены;
	Если НЕ ЗначениеЗаполнено(Токены) Тогда
		Токены = "TRY,TRAN,BEGIN,CATCH,IF,WHILE";
	КонецЕсли;
	
	Пока НЕ ТипУзлаДерево(РезультатФункции) Цикл
		Если УзелНужногоТипа(РезультатФункции, Токены) Тогда
			Прервать;
		КонецЕсли;	
	    РезультатФункции = РезультатФункции.Родитель;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(вхТокены) И ТипУзлаДерево(РезультатФункции) Тогда
		ВызватьИсключение СтрШаблон("Не найден нужный узел типа: %1", вхТокены);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции // ПолучитьНужныйУзел()

Процедура ДобавитьУзел(УзелРодитель, Токен, Текст)
	
	ТекущийУзел = УзелРодитель.Строки.Добавить();
	ТекущийУзел.Текст = Текст;
	ТекущийУзел.Токен = Токен;
	
КонецПроцедуры// ДобавитьУзел()

Функция ДобавитьСтроку(УзелРодитель, Токен, Текст="")
	
	ТекущаяСтрока = УзелРодитель.Строки.Добавить();
	ТекущаяСтрока.Текст = Текст;
	ТекущаяСтрока.Токен = Токен;
	
	Возврат ТекущаяСтрока;
	
КонецФункции // ДобавитьСтроку()

Процедура ВиртуальныйКонтейнер(УзелРодитель, Токен, Разделитель = "", ПозицияВКонтейнере = Неопределено)
	
	ДобавитьУзел(УзелРодитель, Токен, "");
	ТекущийУзел.Виртуальная = Истина;
	ТекущийУзел.Разделитель = Разделитель;
	
	Если ПозицияВКонтейнере <> Неопределено Тогда
		Родитель = ТекущийУзел.Родитель;
		РасположитьСтрокуВКонтейнере(ТекущийУзел, Родитель);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасположитьСтрокуВКонтейнере(СтрокаДерева, УзелДерева, Позиция = 1)
	ИндексСтроки = УзелДерева.Строки.Индекс(СтрокаДерева);
	УзелДерева.Строки.Сдвинуть(СтрокаДерева, -ИндексСтроки + Позиция - 1);	
КонецПроцедуры

Процедура ОбработатьПараметрСписок(ПараметрСписок, ТипПараметра)
	
	ТекстВыполнения = СтрШаблон("
	|Если ЗначениеЗаполнено(ПараметрСписок) Тогда
	|	МассивПараметров = СтрРазделить(ПараметрСписок,"","");
	|	Для Каждого Параметр Из МассивПараметров  Цикл
	|		%1(Параметр);
	|	КонецЦикла;
	|КонецЕсли;", ТипПараметра);
	
	Выполнить(ТекстВыполнения);
	
КонецПроцедуры

Функция Выбрать(Знач Поля = "") Экспорт

	Если НЕ УзелНужногоТипа(ТекущийУзел, "ИЗ") Тогда
		ТекущийУзел = ПолучитьНужныйУзел();
	КонецЕсли; 
		
	ДобавитьУзел(ТекущийУзел, "ВЫБРАТЬ", "ВЫБРАТЬ");
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;
	
	ВиртуальныйКонтейнер(ТекущийУзел, "ПОЛЯ", ",");
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;
	ТекущийУзел.Отступ = 1;
				
	ОбработатьПараметрСписок(Поля, "ПОЛЕ");

	Возврат ЭтотОбъект;

КонецФункции

Функция Первые(Знач Количество) Экспорт

	ПервыйРазличные = Ложь;
	
	Если ТекущийУзел.Токен <> "ПАРАМЕТРЫ_ВЫБРАТЬ" Тогда
		ТекущийУзел = ПолучитьНужныйУзел("ВЫБРАТЬ");
		ВиртуальныйКонтейнер(ТекущийУзел, "ПАРАМЕТРЫ_ВЫБРАТЬ" , , 0);
	ИначеЕсли ТекущийУзел.Строки.Количество() > 0 И ТекущийУзел.Строки[0].Токен = "РАЗЛИЧНЫЕ" Тогда
		ПервыйРазличные = Истина;
	КонецЕсли;
	
	ТекущаяСтрока = ДобавитьСтроку(ТекущийУзел, "ПЕРВЫЕ", СтрШаблон("ПЕРВЫЕ %1", Формат(Количество, "ЧГ=0")));
	
	Если НЕ ПервыйРазличные И ТекущийУзел.Строки.Количество() > 0 Тогда
		РасположитьСтрокуВКонтейнере(ТекущаяСтрока, ТекущийУзел);
	КонецЕсли;

	Возврат ЭтотОбъект;

КонецФункции

Функция Различные() Экспорт

	ТекущийУзел = ПолучитьНужныйУзел("ВЫБРАТЬ");
	
	ВиртуальныйКонтейнер(ТекущийУзел, "ПАРАМЕТРЫ_ВЫБРАТЬ" , , 0);
		
	ДобавитьСтроку(ТекущийУзел, "РАЗЛИЧНЫЕ");

	Возврат ЭтотОбъект;

КонецФункции

Функция Разрешенные() Экспорт

	ТекущийУзел = ПолучитьНужныйУзел("ВЫБРАТЬ");
	
	ВиртуальныйКонтейнер(ТекущийУзел, "ПАРАМЕТРЫ_ВЫБРАТЬ" , , 0);
		
	ДобавитьСтроку(ТекущийУзел, "РАЗРЕШЕННЫЕ");


	Возврат ЭтотОбъект;

КонецФункции

Функция Поле(Знач ТекстПоля, Знач Псевдоним = "") Экспорт
		
	Если ЗначениеЗаполнено(Псевдоним) Тогда
		ТекстПоля = СтрШаблон("%1 КАК %2", ТекстПоля, Псевдоним);
	КонецЕсли;
	
	ТекущаяСтрока = ДобавитьСтроку(ТекущийУзел, "ПОЛЕ", ТекстПоля);
				
	Возврат ЭтотОбъект;

КонецФункции

Функция _Из(Знач ИмяТаблицы = "", Знач Псевдоним = "") Экспорт

	ТекущийУзел = ПолучитьНужныйУзел("ВЫБРАТЬ");
		
	Текст = "ИЗ";
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Если ЗначениеЗаполнено(Псевдоним) Тогда
			Текст = СтрШаблон("ИЗ %1 КАК %2", ИмяТаблицы, Псевдоним);
		Иначе
			Текст = СтрШаблон("ИЗ %1", ИмяТаблицы);
		КонецЕсли;
	КонецЕсли; 
	
	ДобавитьУзел(ТекущийУзел, "ИЗ", Текст);
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;
	ТекущийУзел.Отступ = 1;
			
	Возврат ЭтотОбъект;		

КонецФункции

Функция Где(Знач ТекстУсловия = "") Экспорт

	ТекущийУзел = ПолучитьНужныйУзел("ВЫБРАТЬ");
	
	ДобавитьУзел(ТекущийУзел, "ГДЕ", "ГДЕ");
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;
	
	ВиртуальныйКонтейнер(ТекущийУзел, "УСЛОВИЯ", " И");
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;
	ТекущийУзел.Отступ = 1;	
		
	ОбработатьПараметрСписок(ТекстУсловия, "УСЛОВИЕ");
	
	Возврат ЭтотОбъект;		

КонецФункции

Функция Условие(Знач ТекстУсловия) Экспорт
	ТекущаяСтрока = ДобавитьСтроку(ТекущийУзел, "УСЛОВИЕ", ТекстУсловия);	
	Возврат ЭтотОбъект;	
КонецФункции 

Функция Поместить(Знач ИмяВременнойТаблицы) Экспорт

	ТекущийУзел = ПолучитьНужныйУзел("ВЫБРАТЬ");
	
	ТекущаяСтрока = ДобавитьСтроку(ТекущийУзел, "ПОМЕСТИТЬ", СтрШаблон("ПОМЕСТИТЬ %1", ИмяВременнойТаблицы));	

	Возврат ЭтотОбъект;

КонецФункции

Функция ЛевоеСоединение(Знач ИмяТаблицы, Знач Псевдоним) Экспорт

	ТекущийУзел = ПолучитьНужныйУзел("ИЗ,ВНУТРЕННЕЕ,ЛЕВОЕ");
	
	ДобавитьУзел(ТекущийУзел, "ЛЕВОЕ", СтрШаблон("ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК %2 ПО", ИмяТаблицы, Псевдоним));	
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;
	
	ВиртуальныйКонтейнер(ТекущийУзел, "УСЛОВИЯ", " И");
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;	
	ТекущийУзел.Отступ = 1;
	
	Возврат ЭтотОбъект;

КонецФункции

Функция ВнутреннееСоединение(Знач ИмяТаблицы, Знач Псевдоним) Экспорт
	
	ТекущийУзел = ПолучитьНужныйУзел("ИЗ,ВНУТРЕННЕЕ,ЛЕВОЕ");
	
	ДобавитьУзел(ТекущийУзел, "ВНУТРЕННЕЕ", СтрШаблон("ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК %2 ПО", ИмяТаблицы, Псевдоним));	
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;	
	
	ВиртуальныйКонтейнер(ТекущийУзел, "УСЛОВИЯ", " И");
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;	
	ТекущийУзел.Отступ = 1;
		
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Упорядочить(Знач Поля = "") Экспорт
	
	ТекущийУзел = ПолучитьНужныйУзел("ВЫБРАТЬ");
	
	ДобавитьУзел(ТекущийУзел, "УПОРЯДОЧИТЬ", "УПОРЯДОЧИТЬ ПО");
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;
	
	ВиртуальныйКонтейнер(ТекущийУзел, "ПОЛЯ", ",");
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;
	ТекущийУзел.Отступ = 1;
			
	ОбработатьПараметрСписок(Поля, "ПОЛЕ");
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Сгруппировать(Знач Поля = "") Экспорт
	
	ТекущийУзел = ПолучитьНужныйУзел("ВЫБРАТЬ");
	
	ДобавитьУзел(ТекущийУзел, "СГРУППИРОВАТЬ", "СГРУППИРОВАТЬ");
		
	ВиртуальныйКонтейнер(ТекущийУзел, "ПОЛЯ");
	
	ОбработатьПараметрСписок(Поля, "ПОЛЕ");
	
	Возврат ЭтотОбъект;	 
	
КонецФункции

Функция Имеющие(Знач ТекстУсловия = "") Экспорт

	ТекущийУзел = ПолучитьНужныйУзел("ВЫБРАТЬ");
	
	ДобавитьУзел(ТекущийУзел, "ИМЕЮЩИЕ", "ИМЕЮЩИЕ");
	
	ВиртуальныйКонтейнер(ТекущийУзел, "УСЛОВИЯ", " И");
	ТекущийУзел.Позиция = ПозицияСледующаяСтрока;
	ТекущийУзел.Отступ = 1;	
		
	ОбработатьПараметрСписок(ТекстУсловия, "УСЛОВИЕ");
	
	Возврат ЭтотОбъект;

КонецФункции

